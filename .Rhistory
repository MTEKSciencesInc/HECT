psup_out[which(addarmlater>0),1] = 0
prand = rep(1/nt, nt)
prand[which(addarmlater>0)] = 0
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
xb = rmultinom(ints[j], 1, prob = prand)
xb0 = xb
for (k in 1:ints[j]) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if (response.type == 'rate') {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta[,which(prand>0),j+1], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) {
ll = which(psup[,j+1] < lower)
}
if (length(ll[addarmlater[ll]<j]) != 0) {
fut.stop = c(fut.stop, ll[addarmlater[ll]<j])
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
if (platf == T) addarmlater[nt] = j
}
ntj = length(which(addarmlater<=j & psup[,j+1]>0))
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
prand = rep(0, nt)
if (adapt == T & length(y)>=burn)  {
prand[which(addarmlater<=j & psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
} else prand[which(addarmlater<=j & psup[,j+1]>0)] = 1/ntj
prand[which(addarmlater==j)] = 1/ntj
} else {
mat = apply(theta[,which(prand>0),j+1], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta[,which(prand>0),j+1], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
pfut[which(addarmlater>j)] = 0
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff[addarmlater[ff]<j])
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
if (platf == T) addarmlater[nt] = j
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
psup_out[which(addarmlater>0),1] = 0
ntj = length(which(addarmlater<=j & psup[,j+1]>0)) + 1
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)]  = 1
prand[1] = 1
prand[which(addarmlater==j)] = 1
}
if (sum(prand>0) <= 1  | max(psup[,j+1]) > upper | length(y) >= maxN) {
stop = T
break
}
if (j == (length(ints) - 1)) break
}
j = j + 1
if (stop == T) final_batch = enrolled[j] - cumsum(ints[1:j])
xb = rmultinom(final_batch, 1, prob = prand)
xb0 = xb
for (k in 1:final_batch) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if (response.type == 'rate') {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta[,which(prand>0),j+1], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
} else {
mat = apply(theta[,which(prand>0),j+1], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
}
if (response.type == 'absolute') {
p.est = post0[,1]
low = apply(post0, 1, function(z) qnorm(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qnorm(.975, z[1], z[2]))
}
if (response.type == "rate") {
p.est = post0[,1]/apply(post0,1,sum)
low = apply(post0, 1, function(z) qbeta(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qbeta(.975, z[1], z[2]))
}
if (response.type == "count") {
p.est = post0[,1]/post0[,2]
low = apply(post0, 1, function(z) qgamma(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qgamma(.975, z[1], z[2]))
}
est = data.frame(p.est = p.est, low = low, up = up)
if (good.out == F) {
if (response.type == 'absolute') {
theta = - theta
est = -est
low = est$low
est$low = est$up
est$up = low
}
if (response.type == 'rate') {
theta = 1 - theta
est = 1 - est
low = est$low
est$low = est$up
est$up = low
}
}
compCon
which(prand>0)
stop
sum(prand>0) <= 1
max(psup[,j+1]) > upper
j
j = 1
max(psup[,j+1]) > upper
length(y) >= maxN
psup
theta0
tp
tp$enrolled - cumsum(tp$ss)
if (stop == T)
index = ifelse(j == 1, 1, (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
else index = ifelse(j == 1, 1, (ints[j-1] + 1):ints[j])
j
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = ifelse(j == 1, 1, (ints[j-1] + 1):ints[j])
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)])))
} else index = ifelse(j == 1, 1, (ints[j-1] + 1):ints[j])
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)])))
} else index = (ints[j-1] + 1):ints[j]
index
j = j + 1
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1)):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = (ints[j-1] + 1):ints[j]
index
j = 2
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1)):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = (ints[j-1] + 1):ints[j]
index
j
stop
j  = 1
if (stop == T){
index = ifelse(j == 1, 1, (ints[j-1] + 1)):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = (ints[j-1] + 1):ints[j]
j
ifelse(j == 1, 1, (ints[j-1] + 1))
ifelse(j == 1, 1, (ints[j-1] + 1)):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
(ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
j
j = 2
if (stop == T){
index = (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
}
index
if (stop == T){
index = (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = ifelse(j == 1, 1, (ints[j-1] + 1)):ints[j]
stop = F
if (stop == T){
index = (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = ifelse(j == 1, 1, (ints[j-1] + 1)):ints[j]
index
ints[j]
j
(ints[j-1] + 1)
ints
if (stop == T){
index = (ints[j-1] + 1):(ints[j-1] + enrolled[j-1] - cumsum(ints[1:(j-1)]))
} else index = (ints[j-1] + 1):(ints[j-1] + ints[j])
index
ints[j]
ints[j-1]
(ints[j-1] + ints[j])
(ints[j-1] + 1)
enrolled[j-1] - cumsum(ints[1:(j-1)]
)
maxN = sum(ints)
if (good.out == F) {
if (response.type == 'absolute') theta0 = - theta0
if (response.type == 'rate') theta0 = 1 - theta0
}
j = 0
x = array(0, dim = c(nt, 1))
x0 = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
check = array(0, dim = c(N, nt))
fcheck = array(0, dim = c(N, nt))
if (response.type == "absolute") post0 = cbind(rep(0, nt), rep(10, nt))
if (response.type == "rate") {
post0 = cbind(rep(1, nt), rep(1, nt))
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta = array(- log((1 - p_new) / p_new), dim = c(N, nt, 1))
}
psup = array(rep(1/nt, nt), dim = c(nt, 1))
psup_out = array(rep(1/nt0, nt), dim = c(nt, 1))
prand = rep(1/nt, nt)
fut.stop = NULL
j = j + 1
xb = rmultinom(enrolled[j], 1, prob = prand)
xb0 = xb
for (k in 1:ints[j]) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
index = ifelse(j == 1, 1, (ints[j-1] + 1):ints[j])
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
xb1 = x[index,]
yb1 = y[index]
ints
dim(xb)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1- pnorm(1.64 - 2)
1- pnorm(1.96 - 2)
sampsize(c(.2, .8), type = 'absolute')
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta0 * sqrt(n)/sigma
1 - pnorm(c - z0)
}
pow(.6, 55, type = 'absolute')
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta * sqrt(n)/sigma
1 - pnorm(c - z0)
}
pow(.6, 55, type = 'absolute')
pow(.6, 55, type = 'absolute', sigma = 1)
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha)
z0 = delta * sqrt(n)/sigma
1 - pnorm(c - z0)
}
pow(.6, 55, type = 'absolute', sigma = 1)
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta * sqrt(n)/sigma
pnorm(z0 - c) + pnorm(-z0 - c)
}
pow(.6, 55, type = 'absolute', sigma = 1)
sampsize(c(.2, .8), type = 'absolute', power = 0.8)
sampsize(c(.2, .8), type = 'absolute', power = 0.8, dropout = 0)
pow(.6, 44, type = 'absolute', sigma = 1)
pow(-.6, 44, type = 'absolute', sigma = 1)
pow(-.6, 22, type = 'absolute', sigma = 1)
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta * sqrt(n)/(2*sigma)
pnorm(z0 - c) + pnorm(-z0 - c)
}
pow(-.6, 44, type = 'absolute', sigma = 1)
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta * sqrt(n)/(sqrt(2)*sigma)
pnorm(z0 - c) + pnorm(-z0 - c)
}
pow(-.6, 44, type = 'absolute', sigma = 1)
al0 = 1- (1-.05)^(1/3)
al0
pars = c(.2, .4, .5)
choose(length(pars), 2)
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
alpha = 0.05
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
delta
pow(delta, n, alpha = alphai, type = type, sigma = sigma)
sigma = 1
type = 'absolute'
pow(delta, n, alpha = alphai, type = type, sigma = sigma)
n
n = 44
pow(delta, n, alpha = alphai, type = type, sigma = sigma)
pow(delta, n, alpha = alphai, type = type, sigma = .01)
pow(-.6, 44, type = 'absolute', sigma = 1)
pow(.1, 44, type = 'absolute', sigma = 1)
pars = c(.2, .8, .7)
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
delta
pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows)
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows)
.66*.029
pow1 = function(pars, delta, n, alpha = 0.05, type, sigma){
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows)
}
pow1 = function(pars, n, alpha = 0.05, type, sigma){
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows)
}
pow1(c(.2, .6, 1.2), 44, type = 'absolute', sigma = 1)
pow1(c(.2, .6, 1.2), 60, type = 'absolute', sigma = 1)
pow1(c(.2, .6, 1.2), 60, type = 'absolute', sigma = 1)
?uniroot
uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8)
pow1 = function(n, pars, alpha = 0.05, type, sigma, target = 0){
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows) - target
}
uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8)
pow1(44, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0)
pow1(1, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0)
pow1(1, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(1000, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(60, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(50, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(55, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(57, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
pow1(58, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0.8)
uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8)
pars
pars = c(.2, .6, 1.2)
uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8)
n1 = ceiling(uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8))
n1 = ceiling(uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8))
n1 = cieling(uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8))
n1 = ceiling(uniroot(pow1, c(1, 1000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma, target = 0.8)$root)
n1
pow1(59, c(.2, .6, 1.2), type = 'absolute', sigma = 1, target = 0)
pars = c(.2, .4, .6)
n1 = ceiling(uniroot(pow1, c(1, 100000), pars = pars, alpha = 0.05, type = 'absolute', sigma = sigma,
target = 0.8)$root)
n1
pow1(522, c(.2, .4, .6), type = 'absolute', sigma = 1, target = 0)
pow1 = function(n, pars, alpha = 0.05, type, sigmas, target = 0){
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
sigma = sigmas[j] + sigmas[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows) - target
}
pow1(522, c(.2, .4, .6), type = 'absolute', sigmas = c(1,1,1), target = 0)
pow = function(delta, n, alpha = 0.05, type, sigma) {
c = qnorm(1 - alpha/2)
z0 = delta * sqrt(n)/sqrt(sigma)
pnorm(z0 - c) + pnorm(- z0 - c)
}
pow1 = function(n, pars, alpha = 0.05, type, sigmas, target = 0){
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
sigma = sigmas[j] + sigmas[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows) - target
}
pow1(522, c(.2, .4, .6), type = 'absolute', sigmas = c(1,1,1), target = 0)
pow1(522, c(.2, .4, .6), type = 'absolute', sigmas = c(1,1,.11), target = 0)
sigmas = c(1,1,.11)
n1 = ceiling(uniroot(pow1, c(1, 100000), pars = pars, alpha = 0.05, type = 'absolute', sigmas = sigmas,
target = 0.8)$root)
n1
pow1(290, c(.2, .4, .6), type = 'absolute', sigmas = c(1,1,.11), target = 0)
pow1 = function(n, pars, alpha = 0.05, type, sigmas, target = 0){
if (type == 'rate') sigmas = pars * (1 - pars)
nc = choose(length(pars), 2)
alphai = 1 - (1- alpha)^(1/nc)
j = which.max(pars)
delta = pars[j] - pars[-j]
sigma = sigmas[j] + sigmas[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows) - target
}
pow1(290, c(.2, .4, .6), type = 'rate', sigmas = c(1,1,.11), target = 0)
n1 = ceiling(uniroot(pow1, c(1, 100000), pars = pars, alpha = 0.05, type = 'rate', sigmas = sigmas,
target = 0.8)$root)
n1
pow1(126, c(.2, .4, .6), type = 'rate', sigmas = c(1,1,.11), target = 0)
.05/3
1 - (.95)^(1/3)
1 - (.95)^(1/5)
.5/5
.05/5
pow1 = function(n, pars, alpha = 0.05, type, sigmas, target = 0){
if (type == 'rate') sigmas = pars * (1 - pars)
nc = choose(length(pars), 2)
alphai = alpha/nc
j = which.max(pars)
delta = pars[j] - pars[-j]
sigma = sigmas[j] + sigmas[-j]
pows = pow(delta, n, alpha = alphai, type = type, sigma = sigma)
prod(pows) - target
}
n1 = ceiling(uniroot(pow1, c(1, 100000), pars = pars, alpha = 0.05, type = 'rate', sigmas = sigmas,
target = 0.8)$root)
n1
runApp()
runApp()
runApp()
runApp()
