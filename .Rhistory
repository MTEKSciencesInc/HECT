psup_out[which(addarmlater>0),1] = 0
prand = rep(1/nt, nt)
prand[which(addarmlater>0)] = 0
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
if (j*nb>maxN) nb = maxN - (j-1)*nb
xb = rmultinom(nb, 1, prob = prand)
xb0 = xb
for (k in 1:nb) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'count') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if ((response.type == 'rate' | response.type == 'count') & conjugate_prior != T) {
smc_out = SMC_step(theta[,,j], x = xb0, y = yb, N = N, response.type)
theta_new = smc_out$theta
qt = apply(theta_new, 2, sd)/3
Gibbs_out = apply(theta_new, 1, Gibbs, y = y, x = x[,-1], qt = qt,
response.type = response.type, ng)
theta_new = t(sapply(Gibbs_out, function(l) return(l$theta)))
}
if (response.type == 'rate' & conjugate_prior == T) {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'count' & conjugate_prior == T) {
post0 = post_gamma(yb, xb, post0)
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta_new = log(lambda_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
#theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta_new[,which(prand>0)], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) ll = which(psup[,j+1] < lower)
if (length(ll[addarmlater[ll]<j]) != 0) {
fut.stop = c(fut.stop, ll[addarmlater[ll]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (max(psup[,j+1]) > upper) {
s = which.max(psup[,j+1])
addarmlater[nt] = j
psup[-s,j+1] = 0
} else {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
}
ntj = length(which(addarmlater<=j & psup[,j+1]>0))
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
if (adapt == T & length(y)>=burn)  {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
prand[which(addarmlater==j)] = 1/ntj
} else {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1/ntj
prand[which(addarmlater==j)] = 1/ntj
}
} else {
mat = apply(theta_new[,which(prand>0)], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
pfut[which(addarmlater>j)] = 0
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff[addarmlater[ff]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
psup_out[which(addarmlater>0),1] = 0
ntj = length(which(addarmlater<=j & psup[,j+1]>0)) + 1
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1
prand[1] = 1
prand[which(addarmlater==j)] = 1
prand[which(pfut > uppfut)] = 0
}
condition_A = (platf == F | nt > 3 | j>addarmlater[nt]) & (max(psup[,j+1]) > upper)
if (condition_A | sum(prand>0) <= 1  | length(y) >= maxN) break
}
psup_last = psup[,j+1]
pbin = ifelse(psup_last > upper, 1, 0)
pow0 = sum(pbin[which.max(theta0)] == 1)
alpha = sum(sum(pbin) == 1)
pf = rep(0, nt - 1)
pf[fut.stop] = 1
pow = pbin[-1]
pf
sim_wrapper = function(i, nt, theta0, good.out = T, nb = 1, maxN = 500, N = 1000, upper = 0.975, uppfut = 0.95, lower = .05,
burn = 10*nt, response.type, conjugate_prior = T, padhere = rep(0.95,nt), adapt = T,
platf = T, compCon = F, MID = 0) {
if (good.out == F) {
if (response.type == 'absolute') theta0 = - theta0
if (response.type == 'rate') theta0 = 1 - theta0
}
ng = nb
addarmlater = rep(0, nt)
if (platf == T) addarmlater[nt] = Inf
j = 0
x = array(0, dim = c(nt, 1))
x0 = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
check = array(0, dim = c(N, nt))
fcheck = array(0, dim = c(N, nt))
if (conjugate_prior != T | response.type == "absolute") post0 = cbind(rep(0, nt), rep(10, nt))
if (conjugate_prior == T & response.type == "rate") {
post0 = cbind(rep(1, nt), rep(1, nt))
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta = array(- log((1 - p_new) / p_new), dim = c(N, nt, 1))
}
if (conjugate_prior == T & response.type == "count") {
post0 = cbind(rep(.1, nt), rep(.001, nt))
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta = array(log(lambda_new), dim = c(N, nt, 1))
}
psup = array(rep(1/nt, nt), dim = c(nt, 1))
nt0 = length(which(addarmlater == 0))
psup_out = array(rep(1/nt0, nt), dim = c(nt, 1))
psup_out[which(addarmlater>0),1] = 0
prand = rep(1/nt, nt)
prand[which(addarmlater>0)] = 0
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
if (j*nb>maxN) nb = maxN - (j-1)*nb
xb = rmultinom(nb, 1, prob = prand)
xb0 = xb
for (k in 1:nb) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'count') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if ((response.type == 'rate' | response.type == 'count') & conjugate_prior != T) {
smc_out = SMC_step(theta[,,j], x = xb0, y = yb, N = N, response.type)
theta_new = smc_out$theta
qt = apply(theta_new, 2, sd)/3
Gibbs_out = apply(theta_new, 1, Gibbs, y = y, x = x[,-1], qt = qt,
response.type = response.type, ng)
theta_new = t(sapply(Gibbs_out, function(l) return(l$theta)))
}
if (response.type == 'rate' & conjugate_prior == T) {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'count' & conjugate_prior == T) {
post0 = post_gamma(yb, xb, post0)
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta_new = log(lambda_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
#theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta_new[,which(prand>0)], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) ll = which(psup[,j+1] < lower)
if (length(ll[addarmlater[ll]<j]) != 0) {
fut.stop = c(fut.stop, ll[addarmlater[ll]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (max(psup[,j+1]) > upper) {
s = which.max(psup[,j+1])
addarmlater[nt] = j
psup[-s,j+1] = 0
} else {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
}
ntj = length(which(addarmlater<=j & psup[,j+1]>0))
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
if (adapt == T & length(y)>=burn)  {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
prand[which(addarmlater==j)] = 1/ntj
} else {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1/ntj
prand[which(addarmlater==j)] = 1/ntj
}
} else {
mat = apply(theta_new[,which(prand>0)], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
pfut[which(addarmlater>j)] = 0
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff[addarmlater[ff]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
psup_out[which(addarmlater>0),1] = 0
ntj = length(which(addarmlater<=j & psup[,j+1]>0)) + 1
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1
prand[1] = 1
prand[which(addarmlater==j)] = 1
prand[which(pfut > uppfut)] = 0
}
condition_A = (platf == F | nt > 3 | j>addarmlater[nt]) & (max(psup[,j+1]) > upper)
if (condition_A | sum(prand>0) <= 1  | length(y) >= maxN) break
}
psup_last = psup[,j+1]
pbin = ifelse(psup_last > upper, 1, 0)
pow0 = sum(pbin[which.max(theta0)] == 1)
alpha = sum(sum(pbin) == 1)
pf = rep(0, nt - 1)
pf[fut.stop] = 1
pow = pbin[-1]
out = list(power0 = pow0, power = pow, alpha = alpha, pfut = pf, N_terminate = length(y))
#incProgress(1)#, detail = paste("Finished simulation", i))
return(out)
}
power_compute = function(nt, theta0, good.out = T, nb = 1, maxN = 500, N = 1000, upper = 0.975, uppfut = 0.95, lower = .05,
burn = 10*nt, response.type, conjugate_prior = T, padhere = rep(0.95,nt), adapt = T,
platf = T, compCon = F, MID = 0, M = 100) {
df = data.frame(t(sapply(1:M, sim_wrapper, nt, theta0 = theta0, good.out = good.out, nb = nb, maxN = maxN, N = N, upper = upper, uppfut = uppfut, lower = lower,
burn = burn, response.type, conjugate_prior = conjugate_prior, padhere = padhere, adapt = adapt,
platf = platf, compCon = compCon, MID = MID, simplify = T)))
if (compCon == T) {
power = apply(do.call(rbind, df$power), 2, mean)
pfut = apply(do.call(rbind, df$pfut), 2, mean)
} else {
power = mean(unlist(df$power0))
pfut = NULL
}
out = list(power = power, pfut = pfut, Nt = as.numeric(df$N_terminate))
return(out)
}
power_compute(nt = 4, theta0 = c(0.2, 0.18, 0.15, 0.2), good.out = F, nb = 500, maxN = 6000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .05,
burn = 1000, response.type = 'rate', conjugate_prior = T, padhere = rep(1,4), adapt = F,
platf = F, compCon = T, MID = 0.05, M = 100)
pf = rep(0, nt - 1)
pf[fut.stop] = 1
pf
nt
rep(0, nt - 1)
sim_wrapper = function(i, nt, theta0, good.out = T, nb = 1, maxN = 500, N = 1000, upper = 0.975, uppfut = 0.95, lower = .05,
burn = 10*nt, response.type, conjugate_prior = T, padhere = rep(0.95,nt), adapt = T,
platf = T, compCon = F, MID = 0) {
if (good.out == F) {
if (response.type == 'absolute') theta0 = - theta0
if (response.type == 'rate') theta0 = 1 - theta0
}
ng = nb
addarmlater = rep(0, nt)
if (platf == T) addarmlater[nt] = Inf
j = 0
x = array(0, dim = c(nt, 1))
x0 = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
check = array(0, dim = c(N, nt))
fcheck = array(0, dim = c(N, nt))
if (conjugate_prior != T | response.type == "absolute") post0 = cbind(rep(0, nt), rep(10, nt))
if (conjugate_prior == T & response.type == "rate") {
post0 = cbind(rep(1, nt), rep(1, nt))
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta = array(- log((1 - p_new) / p_new), dim = c(N, nt, 1))
}
if (conjugate_prior == T & response.type == "count") {
post0 = cbind(rep(.1, nt), rep(.001, nt))
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta = array(log(lambda_new), dim = c(N, nt, 1))
}
psup = array(rep(1/nt, nt), dim = c(nt, 1))
nt0 = length(which(addarmlater == 0))
psup_out = array(rep(1/nt0, nt), dim = c(nt, 1))
psup_out[which(addarmlater>0),1] = 0
prand = rep(1/nt, nt)
prand[which(addarmlater>0)] = 0
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
if (j*nb>maxN) nb = maxN - (j-1)*nb
xb = rmultinom(nb, 1, prob = prand)
xb0 = xb
for (k in 1:nb) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'count') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if ((response.type == 'rate' | response.type == 'count') & conjugate_prior != T) {
smc_out = SMC_step(theta[,,j], x = xb0, y = yb, N = N, response.type)
theta_new = smc_out$theta
qt = apply(theta_new, 2, sd)/3
Gibbs_out = apply(theta_new, 1, Gibbs, y = y, x = x[,-1], qt = qt,
response.type = response.type, ng)
theta_new = t(sapply(Gibbs_out, function(l) return(l$theta)))
}
if (response.type == 'rate' & conjugate_prior == T) {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'count' & conjugate_prior == T) {
post0 = post_gamma(yb, xb, post0)
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta_new = log(lambda_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
#theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta_new[,which(prand>0)], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) ll = which(psup[,j+1] < lower)
if (length(ll[addarmlater[ll]<j]) != 0) {
fut.stop = c(fut.stop, ll[addarmlater[ll]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (max(psup[,j+1]) > upper) {
s = which.max(psup[,j+1])
addarmlater[nt] = j
psup[-s,j+1] = 0
} else {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
}
ntj = length(which(addarmlater<=j & psup[,j+1]>0))
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
if (adapt == T & length(y)>=burn)  {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
prand[which(addarmlater==j)] = 1/ntj
} else {
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1/ntj
prand[which(addarmlater==j)] = 1/ntj
}
} else {
mat = apply(theta_new[,which(prand>0)], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
psup_out[which(addarmlater>j), j+1] = 0
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
pfut[which(addarmlater>j)] = 0
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff[addarmlater[ff]<j])
}
if (platf == T & addarmlater[nt] == Inf) {
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
addarmlater[nt] = j
}
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
psup_out[which(addarmlater>0),1] = 0
ntj = length(which(addarmlater<=j & psup[,j+1]>0)) + 1
if (sum(addarmlater==j)>0) ntj = ntj + sum(addarmlater==j)
prand = rep(0, nt)
prand[which(addarmlater<=j & psup[,j+1]>0)] = 1
prand[1] = 1
prand[which(addarmlater==j)] = 1
prand[which(pfut > uppfut)] = 0
}
condition_A = (platf == F | nt > 3 | j>addarmlater[nt]) & (max(psup[,j+1]) > upper)
if (condition_A | sum(prand>0) <= 1  | length(y) >= maxN) break
}
psup_last = psup[,j+1]
pbin = ifelse(psup_last > upper, 1, 0)
pow0 = sum(pbin[which.max(theta0)] == 1)
alpha = sum(sum(pbin) == 1)
pf = rep(0, nt)
pf[fut.stop] = 1
pf = pf[-1]
pow = pbin[-1]
out = list(power0 = pow0, power = pow, alpha = alpha, pfut = pf, N_terminate = length(y))
#incProgress(1)#, detail = paste("Finished simulation", i))
return(out)
}
power_compute(nt = 4, theta0 = c(0.2, 0.18, 0.15, 0.2), good.out = F, nb = 500, maxN = 6000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .05,
burn = 1000, response.type = 'rate', conjugate_prior = T, padhere = rep(1,4), adapt = F,
platf = F, compCon = T, MID = 0.05, M = 100)
runApp()
runApp()
